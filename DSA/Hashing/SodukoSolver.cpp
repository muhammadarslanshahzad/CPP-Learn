 /*
 ----------------------- Day 73 ----------------------
 ----- Hashing--Soduko Solver      ----------
 --- Date: 20.07.2021---------------------------------
 Author: Muhammad Arslan Shahzad, 
 ------------------------------------------------------
*/

#include <bits/stdc++.h>
using namespace std;

#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define rep(i,a,b) for(int i=a; i<b; i++)
#define setBits(x) builtin_popcount(x)

void helper(int r, int c,  vector<vector<char>>&a, map<pii, map<int, int>>&mp, vector<map<int, int>> &row, vector<map<int, int>> &col ){
    if(r == 9 ){
        for(auto it : a){
            for(auto i : it){
                cout<<i<<" ";
            }
            cout<<"\n";
        }
        cout<<"\n";
        return;
    }

    if(c == 9){
        helper(r+1,0,a,mp,row,col);
        return;
    }

    if(a[r][c] != '.'){
        helper(r,c+1,a,mp,row,col);
        return;
    }

    for(int i=0; i<=9; i++){
        int rw = r/3, cl = c/3;

        if( !mp[{rw,cl}][i] and !row[r][i] and !col[c][i]){
                mp[{rw,cl}][i] = 1;
                row[r][i] = 1;
                col[c][i] = 1;
                a[r][c] = 1+'0';
                helper(r,c+1,a,mp,row,col);
                mp[{rw,cl}][i] = 0;
                row[r][i] = 0;
                col[c][i] = 0;
                a[r][c] = '.';
        }
    }
}

void solve(vector<vector<char>> &a){

    map<pii, map<int,int>>mp;
    vector<map<int,int>> row(9);
    vector<map<int,int>> col(9);

    for(int i=0; i<9; i++){
        for(int j=0; j<9; j++){
            if(a[i][j] != '.'){
                mp[{i/3, j/3}][a[i][j]-'0'] = 1;
                row[i][a[i][j]-'0'] = 1;
                col[j][a[i][j]-'0'] = 1;
            }
        }
    }
    helper(0,0,a,mp,row,col);
}

int main(void){

    vector<vector<char>> soduku = {
        {'5','3','.','.','7','.','.','.','.'},
        {'6','.','.','1','9','5','.','.','.'},
        {'.','9','8','.','.','.','.','6','.'},
        {'8','.','.','.','6','.','.','.','3'},
        {'4','.','.','8','.','3','.','.','1'},
        {'7','.','.','.','2','.','.','.','6'},
        {'.','6','.','.','.','.','2','8','.'},
        {'.','.','.','4','1','9','.','.','5'},
        {'.','.','.','.','8','.','.','7','9'}
    };

    solve(soduku);

    return 0;
}

/**
 * Sample Output 
 *  
 *  6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3 
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6 
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1 
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9 

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3 
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5 
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6 
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1 
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1 
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1 
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5 
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1 
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6 
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1 
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1 
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5 
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3 
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5 
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1 
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1 
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9 

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1 
    8 1 1 1 6 1 1 1 3
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5 
    1 1 1 1 8 1 1 7 9

    5 3 1 1 7 1 1 1 1
    6 1 1 1 9 5 1 1 1
    1 9 8 1 1 1 1 6 1
    8 1 1 1 6 1 1 1 3 
    4 1 1 8 1 3 1 1 1
    7 1 1 1 2 1 1 1 6
    1 6 1 1 1 1 2 8 1
    1 1 1 4 1 9 1 1 5
    1 1 1 1 8 1 1 7 9

 * 
 * */ 